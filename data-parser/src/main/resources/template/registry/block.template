import lombok.Getter;

import java.util.ArrayList;
import java.util.List;

@Getter
public final class Block {
    public static final char[] NONE_DROPS = new char[0];

    public static final List<Block> ALL = new ArrayList<>({ALL_FIELD});

    private final char id;
    private final float resistance;
    private final char[] drops;

    public Block(int id, double resistance, char[] drops) {
        this.id = (char)id;
        this.resistance = (short) (resistance >= 10000 ? -1 : resistance);
        this.drops = drops;
    }

    private static Block of(final int id, final double resistance, final int drop) {
        final Block block = new Block(id, resistance, new char[] { (char)drop });
        ALL.add(block);
        return block;
    }

    private static Block of(final int id, final double resistance, final char[] drops) {
        final Block block = new Block(id, resistance, drops);
        ALL.add(block);
        return block;
    }

    private static Block of(final int id, final double resistance) {
        final Block block = new Block(id, resistance, NONE_DROPS);
        ALL.add(block);
        return block;
    }

    public boolean hasDrops() {
        return drops.length != 0;
    }

    @Override
    public int hashCode() {
        return id;
    }

    @Override
    public boolean equals(final Object object) {
        return object == this || (object instanceof Block block && block.id == this.id);
    }

    public static final Block {BLOCKS_FIELD};
}